name: Sync Documentation Across Repositories

on:
  push:
    paths:
      - 'docs/shared/**'
      - 'docs/website/**'
      - 'docs/data/**'
      - 'docs/templates/**'
      - 'docs/sync-config.yml'
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync all documentation'
        required: false
        default: false
        type: boolean
      target_repo:
        description: 'Specific repository to sync (leave empty for all)'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'pdoom1-website'
          - 'pdoom-data'

jobs:
  sync-documentation:
    runs-on: ubuntu-latest
    if: github.repository == 'PipFoweraker/pdoom1'
    
    strategy:
      matrix:
        target:
          - repo: pdoom1-website
            docs_paths: ['shared/', 'website/', 'templates/']
            destination: 'docs/'
          - repo: pdoom-data
            docs_paths: ['shared/', 'data/', 'templates/']
            destination: 'docs/'
    
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need for diff detection
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          pip install pyyaml requests
          
      - name: Skip if not targeting this repository
        if: github.event.inputs.target_repo != '' && github.event.inputs.target_repo != matrix.target.repo
        run: |
          echo "Skipping ${{ matrix.target.repo }} - not the target repository"
          exit 0
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: PipFoweraker/${{ matrix.target.repo }}
          token: ${{ secrets.CROSS_REPO_TOKEN }}
          path: target-repo
          ref: main
          
      - name: Detect changed documentation
        id: changes
        run: |
          if [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
            echo "REFRESH Force sync requested - syncing all documentation"
            echo "sync_needed=true" >> $GITHUB_OUTPUT
            echo "changed_files=all" >> $GITHUB_OUTPUT
          else
            echo "SEARCH Detecting changed documentation files..."
            
            # Check which documentation directories have changes
            changed_docs=""
            for docs_path in ${{ join(matrix.target.docs_paths, ' ') }}; do
              if git diff --name-only HEAD~1 HEAD | grep -q "^docs/$docs_path"; then
                changed_docs="$changed_docs docs/$docs_path"
              fi
            done
            
            if [ -n "$changed_docs" ]; then
              echo "MEMO Changed documentation: $changed_docs"
              echo "sync_needed=true" >> $GITHUB_OUTPUT
              echo "changed_files=$changed_docs" >> $GITHUB_OUTPUT
            else
              echo "INFO No documentation changes detected for ${{ matrix.target.repo }}"
              echo "sync_needed=false" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Sync documentation files
        if: steps.changes.outputs.sync_needed == 'true'
        run: |
          echo "LAUNCH Syncing documentation to ${{ matrix.target.repo }}..."
          
          # Load sync configuration
          if [ ! -f "docs/sync-config.yml" ]; then
            echo "ERROR Sync configuration not found"
            exit 1
          fi
          
          # Create documentation sync script
          cat > sync_docs.py << 'EOF'
          import yaml
          import shutil
          import os
          from pathlib import Path
          from datetime import datetime
          import sys
          
          def sync_documentation():
              # Load configuration
              with open('docs/sync-config.yml', 'r') as f:
                  config = yaml.safe_load(f)
              
              target_repo = "${{ matrix.target.repo }}"
              if target_repo not in config['repositories']:
                  print(f"ERROR No configuration found for {target_repo}")
                  return False
              
              repo_config = config['repositories'][target_repo]
              mappings = repo_config['mappings']
              transformations = config.get('transformations', {}).get(target_repo, {})
              
              # Process each mapping
              for source_path, dest_path in mappings.items():
                  source = Path('docs') / source_path
                  destination = Path('target-repo') / dest_path
                  
                  if source.exists():
                      print(f"DOCUMENT Syncing {source}  ->  {destination}")
                      
                      if source.is_file():
                          # Copy single file with processing
                          content = source.read_text(encoding='utf-8')
                          
                          # Apply transformations
                          for pattern, replacement in transformations.items():
                              content = content.replace(pattern, replacement)
                          
                          # Add sync metadata
                          sync_header = f"""<!--
          This file is automatically synced from pdoom1/docs/{source.relative_to(Path('docs'))}
          Last synced: {datetime.now().isoformat()}
          Source commit: ${{ github.sha }}
          DO NOT EDIT DIRECTLY - Changes will be overwritten by sync
          -->

          """
                          content = sync_header + content
                          
                          # Write to destination
                          destination.parent.mkdir(parents=True, exist_ok=True)
                          destination.write_text(content, encoding='utf-8')
                          
                      elif source.is_dir():
                          # Copy directory with processing
                          destination.mkdir(parents=True, exist_ok=True)
                          
                          for file_path in source.rglob('*.md'):
                              rel_path = file_path.relative_to(source)
                              dest_file = destination / rel_path
                              
                              content = file_path.read_text(encoding='utf-8')
                              
                              # Apply transformations
                              for pattern, replacement in transformations.items():
                                  content = content.replace(pattern, replacement)
                              
                              # Add sync metadata
                              sync_header = f"""<!--
          This file is automatically synced from pdoom1/docs/{file_path.relative_to(Path('docs'))}
          Last synced: {datetime.now().isoformat()}
          Source commit: ${{ github.sha }}
          DO NOT EDIT DIRECTLY - Changes will be overwritten by sync
          -->

          """
                              content = sync_header + content
                              
                              # Write to destination
                              dest_file.parent.mkdir(parents=True, exist_ok=True)
                              dest_file.write_text(content, encoding='utf-8')
              
              return True
          
          if __name__ == "__main__":
              success = sync_documentation()
              sys.exit(0 if success else 1)
          EOF
          
          # Run the sync
          python sync_docs.py
          
      - name: Create sync summary
        if: steps.changes.outputs.sync_needed == 'true'
        working-directory: target-repo
        run: |
          echo "METRICS Documentation Sync Summary" > sync-summary.md
          echo "Repository: ${{ matrix.target.repo }}" >> sync-summary.md
          echo "Source commit: ${{ github.sha }}" >> sync-summary.md
          echo "Sync timestamp: $(date -Iseconds)" >> sync-summary.md
          echo "" >> sync-summary.md
          
          # List changed files
          if [ -n "$(git status --porcelain)" ]; then
            echo "MEMO Files changed:" >> sync-summary.md
            git status --porcelain | sed 's/^/  /' >> sync-summary.md
          else
            echo "INFO No files changed" >> sync-summary.md
          fi
          
          cat sync-summary.md
          
      - name: Commit and push changes
        if: steps.changes.outputs.sync_needed == 'true'
        working-directory: target-repo
        run: |
          git config user.name "Documentation Sync Bot"
          git config user.email "docs-sync+bot@pdoom.net"
          
          # Check if there are any changes
          if [ -n "$(git status --porcelain)" ]; then
            # Add all changed files
            git add .
            
            # Create commit message
            commit_msg="docs: sync from pdoom1@$(echo ${{ github.sha }} | head -c 7)

          Synchronized documentation from pdoom1 repository.
          
          Source commit: ${{ github.sha }}
          Trigger: ${{ github.event_name }}
          Sync timestamp: $(date -Iseconds)
          
          Changed paths: ${{ steps.changes.outputs.changed_files }}
          
          This is an automated commit from the documentation sync workflow."
            
            # Commit changes
            git commit -m "$commit_msg"
            
            # Push to repository
            git push origin main
            
            echo "SUCCESS Successfully synced documentation to ${{ matrix.target.repo }}"
          else
            echo "INFO No documentation changes to commit for ${{ matrix.target.repo }}"
          fi
          
      - name: Report sync status
        if: always()
        run: |
          if [ "${{ steps.changes.outputs.sync_needed }}" == "true" ]; then
            echo "CLIPBOARD Sync completed for ${{ matrix.target.repo }}"
          else
            echo "SKIP Sync skipped for ${{ matrix.target.repo }} (no changes)"
          fi
          
  notify-completion:
    runs-on: ubuntu-latest
    needs: sync-documentation
    if: always() && github.repository == 'PipFoweraker/pdoom1'
    
    steps:
      - name: Notification
        run: |
          echo "TARGET Documentation sync workflow completed"
          echo "Trigger: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          
          # Future: Add Discord/Slack notifications here
          # Future: Update documentation dashboard
