name: Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: ASCII Compliance Check
      run: |
        echo "Checking ASCII compliance with intelligent converter..."
        python scripts/intelligent_ascii_converter.py --dry-run
        if [ $? -ne 0 ]; then
          echo "ASCII compliance violations found!"
          echo "Run: python scripts/intelligent_ascii_converter.py to fix"
          exit 1
        fi
        
    - name: Development Standards Check
      run: |
        echo "Running comprehensive standards enforcement..."
        python scripts/enforce_standards.py --check-all
        if [ $? -ne 0 ]; then
          echo "Standards violations found! Check output above."
          exit 1
        fi
        
    - name: Import Cleanup Check
      run: |
        echo "Checking for unused imports..."
        python -m autoflake --remove-all-unused-imports --remove-unused-variables --check --recursive src/
        if [ $? -ne 0 ]; then
          echo "Unused imports found!"
          echo "Run: python -m autoflake --remove-all-unused-imports --remove-unused-variables --in-place --recursive src/"
          exit 1
        fi
        
    - name: Version Consistency Check
      run: |
        echo "Checking version consistency..."
        python -c "
        from src.services.version import get_display_version
        version = get_display_version()
        print(f'Current version: {version}')
        
        # Check that version is not a placeholder
        if 'dev' in version.lower() or 'placeholder' in version.lower():
            print('ERROR: Development placeholder version detected')
            exit(1)
            
        print('Version check passed')
        "
        
    - name: Web Export System Check
      run: |
        echo "Validating web export system..."
        python -c "
        from tools.web_export import LeaderboardWebExporter, WebAPIFormatter, PrivacyFilter
        
        # Test that components can be imported
        exporter = LeaderboardWebExporter()
        formatter = WebAPIFormatter()
        privacy_filter = PrivacyFilter()
        
        print('Web export components validated')
        "
        
    - name: CLI Interface Check
      run: |
        echo "Testing CLI interface..."
        python -m src.leaderboard status
        
    - name: Documentation Check
      run: |
        echo "Checking documentation structure..."
        required_docs=(
          "README.md"
          "CHANGELOG.md"
          "tools/web_export/WEB_EXPORT_SYSTEM_GUIDE.md"
          "docs/releases/v0.10.0_RELEASE_NOTES.md"
        )
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "ERROR: Required documentation missing: $doc"
            exit 1
          fi
        done
        
        echo "Documentation structure validated"

    - name: Commit Message Check
      if: github.event_name == 'push'
      run: |
        echo "Checking latest commit message for ASCII compliance..."
        commit_msg=$(git log -1 --pretty=%B)
        echo "Commit message: $commit_msg"
        
        # Check for common Unicode violations
        if echo "$commit_msg" | grep -P '[^\x00-\x7F]'; then
          echo "ERROR: Non-ASCII characters found in commit message"
          echo "Use ASCII-only characters in commit messages"
          exit 1
        fi
        
        echo "Commit message ASCII compliance verified"